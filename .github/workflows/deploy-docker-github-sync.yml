# #
#   @type               github workflow
#   @author             Aetherinox
#   @url                https://github.com/Aetherinox
#
#   @usage              originally, Keeweb's docker files were hosted in the main branch within the folder /package/docker/*
#                       with the new setup, the Keeweb docker files are stored in a separate branch from main called `docker/keeweb`.
#                       this workflow copies the required docker files from the new branch docker/keeweb, and brings them over to the main branch
#                       and places them within the original subfolder `package/docker/*`
#
#   @secrets            secrets.ADMINSERV_GPG_KEY_ASC                   gpg private key (armored) | BEGIN PGP PRIVATE KEY BLOCK
#                       secrets.ADMINSERV_GPG_PASSPHRASE                gpg private key passphrase
#
#   @triggers           this workflow is automatically run every time a PUSH is made to the branch `docker/keeweb`; it will copy docker/keeweb's contents
#                       to the main branch's `package/docker` folder.
#
#                       this workflow can be manually triggered (WORKFLOW_DISPATCH). to select the destination branch, click `Run Workflow` and select `Use Workflow From`
#                       and select the destination branch
# #

name: "üîÑ Sync ‚Ä∫ Docker ‚Ä∫ Github"
run-name: "üîÑ Sync ‚Ä∫ Docker ‚Ä∫ Github"

# #
#   Triggers
# #

on:

    # #
    #   Trigger ‚Ä∫ Workflow Dispatch
    #
    #   If any values are not provided, will use fallback env variable
    # #

    workflow_dispatch:
        inputs:

            # #
            #   Repo ‚Ä∫ Source
            #
            #   Where the files to be copied are
            # #

            REPO_SRC:
              description:  "üìÇ Repo ‚Ä∫ Source"
              required:     true
              default:      'docker/keeweb'
              type:         string

            # #
            #   Destination Path
            #
            #   where the files will be placed
            # #

            DEST_PATH:
                description:  "üìÇ Destination Folder"
                required:     true
                default:      'package/docker'
                type:         string

            # #
            #   true          no changes to the repo will be made
            #   false         workflow will behave normally, and push any changes detected to the files
            # #

            DRY_RUN:
                description:  "üìë Dry Run Only"
                required:     true
                default:      false
                type:         boolean

    # #
    #   Trigger ‚Ä∫ Push
    # #

    push:
        branches:
            - docker/keeweb

# #
#   Environment Vars
# #

env:
    REPO_MAIN:            'main'
    REPO_SRC:             ${{ github.event.inputs.REPO_SRC || 'docker/keeweb' }}
    REPO_DEST:            ${{ github.ref_name || 'main' }}
    DEST_PATH:            ${{ github.event.inputs.DEST_PATH || 'package/docker' }}

    BOT_NAME_1:           EuropaServ
    BOT_NAME_DEPENDABOT:  dependabot[bot]
    
# #
#   Jobs
#
#   The way pushed docker containers on Github work, the most recent image built goes at the top.
#   We will use the order below which builds the :latest image last so that it appears at the very
#   top of the packages page.
# #

jobs:

    # #
    #   Job ‚Ä∫ Create Tag
    # #

    job-docker-release-tags-create:
        name: >-
            üì¶ Release ‚Ä∫ Sync
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write
            attestations: write
            id-token: write
        steps:

            # #
            #   Sync ‚Ä∫ Start
            # #

            - name: "‚úÖ Start"
              id: task_sync_start
              run: |
                  echo "Starting branch sync"

            # #
            #   Sync ‚Ä∫ Checkout
            # #

            - name: "‚òëÔ∏è Checkout"
              id: task_sync_checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Sync ‚Ä∫ Install Dependencies
            # #

            - name: "üì¶ Install Dependencies"
              id: task_sync_dependencies
              run:
                  sudo apt-get install -qq dos2unix

            # #
            #   Sync ‚Ä∫ Debug
            # #

            - name: '‚ö†Ô∏è Env Variable ‚Ä∫ Check'
              id: task_sync_vars_check
              run: |
                  if [[ "${{ env.REPO_SRC }}" == "${{ env.REPO_DEST || env.REPO_MAIN }}" ]]; then
                      echo "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Source and destination branches are the same, changing destination branch to main ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è"
                      branch_Default="${{ env.REPO_MAIN }}"
                      echo "REPO_DEST=$(echo $branch_Default)" >> $GITHUB_ENV
                  fi

            # #
            #   Sync ‚Ä∫ Var Check ‚Ä∫ Confirm
            # #

            - name: '‚ö†Ô∏è Env Variable ‚Ä∫ Confirm'
              id: task_sync_vars_confirm
              run: |
                  echo "REPO_DEST is now ${{ env.REPO_DEST }}"

            # #
            #   Sync ‚Ä∫ Checkpoint ‚Ä∫ 1
            # #

            - name: '‚ö†Ô∏è Checkpoint 1'
              id: task_sync_checkpoint_1
              run: |
                  echo "github.actor.......... ${{ github.actor }}"
                  echo "github.ref ........... ${{ github.ref }}"
                  echo "github.ref_name ...... ${{ github.ref_name }}"
                  echo "github.event_name .... ${{ github.event_name }}"
                  echo "inputs.DRY_RUN ....... ${{ inputs.DRY_RUN }}"
                  echo "env.REPO_SRC.......... ${{ env.REPO_SRC }}"
                  echo "env.REPO_DEST......... ${{ env.REPO_DEST || env.REPO_MAIN  }}"
                  echo "env.DEST_PATH......... ${{ env.DEST_PATH }}"

                  echo " ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è This workflow will copy files [ üìÑ root Dockerfile* ] from branch üè† ${{ env.REPO_SRC }} to üîÑ ${{ env.REPO_DEST || env.REPO_MAIN }} to folder üìÇ ${{ env.DEST_PATH }} ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è"
                  echo "    ‚Ä∫ Copy files ............. üìÑ root Dockerfile*"
                  echo "    ‚Ä∫ From branch ............ üè† ${{ env.REPO_SRC }}"
                  echo "    ‚Ä∫ To branch .............. üîÑ ${{ env.REPO_DEST || env.REPO_MAIN }}"
                  echo "    ‚Ä∫ In folder .............. üìÇ ${{ env.DEST_PATH }}"

            # #
            #   Sync ‚Ä∫ Copy Dockerfiles to Main branch
            #
            #   this action copies all the required docker files from the docker/keeweb branch, over to 
            #   the main branch within the subfolder `package/docker/*`
            #
            #   to discard the actions of git checkout and not commit, run: 
            #       git checkout -
            #
            #   if you are copying files from docker/keeweb which don't exist on the main branch, you must
            #   run `git add package/docker` to track the new files / folders added
            #
            #   this step does the following:
            #       - deletes the package/docker/* folder contents on the destination repo
            #       - sets a few settings to get rid of annoying features
            #       - git checkout origin/main (destination branch)
            #       - git checkout origin/docker/keeweb (source branch) and sets working tree to /package/docker/
            #       - adds all changes to git which will be committed in a later step
            # #

            - name: '‚¨áÔ∏è Pull Docker Files'
              id: task_sync_files_pull
              run: |
                  rm -rf ${{ env.DEST_PATH }}/*
                  git config --global pager.diff false
                  git config --global advice.detachedHead false
                  git checkout origin/${{ env.REPO_DEST || env.REPO_MAIN }}                                                      #  ${{ github.ref_name || 'main' }}
                  git --work-tree=${{ env.DEST_PATH }} checkout origin/${{ env.REPO_SRC }} -- root Dockerfile*  #  ${{ inputs.REPO_SRC || 'docker/keeweb' }}
                  git add ${{ env.DEST_PATH }}

            # #
            #   Sync ‚Ä∫ Run permission management
            # #

            - name: '#Ô∏è‚É£ Manage Permissions'
              id: task_sync_fix_permissions
              run: |
                  find ${{ env.DEST_PATH }} -name 'run' -exec chmod 755 {} \;
                  WRONG_PERM=$(find ${{ env.DEST_PATH }}  -path "./.git" -prune -o \( -name "run" -o -name "finish" -o -name "check" \) -not -perm -u=x,g=x,o=x -print)
                  if [ -n "${WRONG_PERM}" ]; then
                      for i in ${WRONG_PERM}; do
                      echo "::error file=${i},line=1,title=Missing Executable Bit::This file needs to be set as executable!"
                      done
                      exit 1
                  else
                      echo "**** Executable permissions are OK ****"
                  fi

            # #
            #   Sync ‚Ä∫ Run dos2unix
            # #

            - name: 'üîê Apply dos2unix'
              id: task_sync_fix_dos2unix
              run: |
                  find ${{ env.DEST_PATH }} -type f | grep -Ev '.git|.github|*.jpg|*.jpeg|*.png' | xargs dos2unix --

            # #
            #   Sync ‚Ä∫ Show Differences
            # 
            #   this is just a debugging step, it shows all the files pending commit that will be committed.
            #   if you are stuck in the git pager, hit "Q" to quit.
            #
            #   to disable the pager, run the command:
            #       git config --global pager.diff false
            # #

            - name: 'üìë View Differences'
              id: task_sync_debug_diff
              run: |
                  git diff --name-only HEAD

            # #
            #   Sync ‚Ä∫ Precommit
            #
            #   define the date/time and the commit message
            # #

            - name: 'üì¶ Commit ‚Ä∫ Pre-commit'
              id: task_sync_commit_pre
              run: |
                  now=$(date -u '+%m/%d/%Y %H:%M')
                  commit_label="Docker Sync" >> $GITHUB_ENV
                  commit_message="\`Ô∏èÔ∏èüîÑ $commit_label üîÑ\` \`$now UTC\`" >> $GITHUB_ENV
                  echo "COMMIT_MESSAGE=$(echo $commit_message)" >> $GITHUB_ENV
                  echo "NOW=$(echo $now)" >> $GITHUB_ENV

            # #
            #   Sync ‚Ä∫ GPG Key
            #
            #   this step is required so that you can sign commits in the last step
            #       stefanzweifel/git-auto-commit-action@v5
            # #

            - name: 'üì¶ Commit ‚Ä∫ GPG Key'
              id: task_sync_commit_gpg
              uses: crazy-max/ghaction-import-gpg@v6
              with:
                  gpg_private_key: ${{ secrets.ADMINSERV_GPG_KEY_ASC }}
                  passphrase: ${{ secrets.ADMINSERV_GPG_PASSPHRASE }}
                  git_user_signingkey: true
                  git_commit_gpgsign: true

            # #
            #   Sync ‚Ä∫ Checkpoint ‚Ä∫ 2 
            # #

            - name: '‚ö†Ô∏è Checkpoint 2'
              id: task_sync_checkpoint_2
              run: |
                  echo "github.actor.......... ${{ github.actor }}"
                  echo "github.ref ........... ${{ github.ref }}"
                  echo "github.ref_name ...... ${{ github.ref_name }}"
                  echo "github.event_name .... ${{ github.event_name }}"
                  echo "inputs.DRY_RUN ....... ${{ inputs.DRY_RUN }}"

                  echo " ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è This workflow will copy files [ üìÑ root Dockerfile* ] from branch üè† ${{ env.REPO_SRC }} to üîÑ ${{ env.REPO_DEST || env.REPO_MAIN }} to folder üìÇ ${{ env.DEST_PATH }} ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è"
                  echo "    ‚Ä∫ Copy files ............. üìÑ root Dockerfile*"
                  echo "    ‚Ä∫ From branch ............ üè† ${{ env.REPO_SRC }}"
                  echo "    ‚Ä∫ To branch .............. üîÑ ${{ env.REPO_DEST || env.REPO_MAIN }}"
                  echo "    ‚Ä∫ In folder .............. üìÇ ${{ env.DEST_PATH }}"

            # #
            #   Sync ‚Ä∫ Commit
            # 
            #   commits the pending changes to the main branch
            # #

            - name: 'üîÑ Sync ‚Ä∫ Commit'
              id: task_sync_commit
              uses: stefanzweifel/git-auto-commit-action@v5
              if: ( github.event_name == 'workflow_dispatch' && inputs.DRY_RUN == false ) || ( github.event_name == 'push' )
              with:
                  commit_message: ${{ env.COMMIT_MESSAGE }}
                  commit_author: "${{ steps.task_sync_commit_gpg.outputs.name }} <${{ steps.task_sync_commit_gpg.outputs.email }}>"
                  commit_user_name: ${{ steps.task_sync_commit_gpg.outputs.name }}
                  commit_user_email: ${{ steps.task_sync_commit_gpg.outputs.email }}
                  branch: ${{ env.REPO_DEST || env.REPO_MAIN }}
                  add_options: '-u'